generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")

}

model Professor {
  id           String        @id @default(uuid())
  nome         String
  email        String        @unique
  telefone     String?
  disponibilidade DisponibilidadeProfessor[]
  horarios     Horario[]
}

model Disciplina {
  id          String     @id @default(uuid())
  nome        String
  codigo      String     @unique
  horarios    Horario[]
}

model DisponibilidadeProfessor {
  id            String   @id @default(uuid())
  professorId   String
  professor     Professor @relation(fields: [professorId], references: [id], onDelete: Restrict )
  diaSemana     String
  horaInicio    DateTime
  horaFim       DateTime
}

model Sala {
  id           String    @id @default(uuid())
  nome         String    @unique
  capacidade   Int
  horarios     Horario[]
}

model Turma {
  id           String    @id @default(uuid())
  nome         String    @unique
  horarios     Horario[]
}

model Horario {
  id           String    @id @default(uuid())
  diaSemana    String
  horaInicio   DateTime
  horaFim      DateTime
  projetoId    String     // Chave estrangeira para associar ao Projeto
  projeto      Projeto    @relation(fields: [projetoId], references: [id], onDelete: Restrict)

  turmaId      String
  disciplinaId String
  salaId       String
  professorId  String

  turma        Turma       @relation(fields: [turmaId], references: [id], onDelete: Restrict)
  disciplina   Disciplina  @relation(fields: [disciplinaId], references: [id], onDelete: Restrict)
  sala         Sala        @relation(fields: [salaId], references: [id], onDelete: Restrict)
  professor    Professor   @relation(fields: [professorId], references: [id], onDelete: Restrict)

  @@unique([diaSemana, horaInicio, professorId]) // Evita conflito de professores
  @@unique([diaSemana, horaInicio, turmaId]) // Evita conflito de turma
  @@unique([diaSemana, horaInicio, salaId]) // Evita conflito de sala

}

model Usuario {
  id         String  @id @default(uuid())
  nome       String
  email      String  @unique
  projetos   UsuarioProjeto[]
}

model Projeto {
  id          String    @id @default(uuid())
  nome        String
  descricao   String?
  horarios    Horario[]
  usuarios    UsuarioProjeto[] // Relacionamento via UsuarioProjeto
}

model UsuarioProjeto {
  id         String  @id @default(uuid())
  usuarioId  String
  projetoId  String
  usuario    Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  projeto    Projeto  @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  @@unique([usuarioId, projetoId]) // Evita duplicação de relações
}