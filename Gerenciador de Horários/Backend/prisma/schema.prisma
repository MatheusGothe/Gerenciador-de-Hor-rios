generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model professor {
  id              String                     @id @default(uuid())
  nome            String
  email           String                     @unique
  telefone        String?
  projetoId Int    // Chave estrangeira para associar ao Projeto
  projeto   Projeto   @relation(fields: [projetoId], references: [id], onDelete: Cascade)

  disponibilidade disponibilidadeprofessor[]
  horarios        horario[]
}

model disciplina {
  id        String    @id @default(uuid())
  nome      String
  duracao   Int       // minutos
  projetoId Int    // Chave estrangeira para associar ao Projeto
  projeto   Projeto   @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  horarios  horario[]

  @@unique([nome, projetoId]) // Garante que o nome seja único dentro do mesmo projeto
}

model disponibilidadeprofessor {
  id          String    @id @default(uuid())
  professorId String
  diaSemana   DiaSemana
  horaInicio  DateTime
  horaFim     DateTime
  disponivel  Boolean   @default(true) // Novo campo indicando se o professor está disponível ou não naquele dia

  professor   professor @relation(fields: [professorId], references: [id], onDelete: Restrict)
}

model sala {
  id         String    @id @default(uuid())
  nome       String    @unique
  capacidade Int
  horarios   horario[]
}

model turma {
  id       String    @id @default(uuid())
  nome     String    @unique
  horarios horario[]
}

model horario {
  id         String      @id @default(uuid())
  diaSemana  DiaSemana
  horaInicio DateTime
  horaFim    DateTime
  projetoId  Int // Chave estrangeira para associar ao Projeto
  projeto    Projeto     @relation(fields: [projetoId], references: [id], onDelete: Restrict)

  turmaId      String
  disciplinaId String
  salaId       String
  professorId  String

  turma      turma      @relation(fields: [turmaId], references: [id], onDelete: Restrict)
  disciplina disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Restrict)
  sala       sala       @relation(fields: [salaId], references: [id], onDelete: Restrict)
  professor  professor  @relation(fields: [professorId], references: [id], onDelete: Restrict)

  @@unique([diaSemana, horaInicio, professorId]) // Evita conflito de professores
  @@unique([diaSemana, horaInicio, turmaId]) // Evita conflito de turma
  @@unique([diaSemana, horaInicio, salaId]) // Evita conflito de sala
}
model Usuario {
  id       String    @id @default(uuid())
  nome     String
  email    String    @unique
  password String
  projetos Projeto[] // Um usuário pode estar em vários projetos
}

model Projeto {
  id        Int         @id @default(autoincrement()) 
  nome      String
  descricao String?
  usuarioId String
  horaInicioManha DateTime?
  horaFimManha    DateTime?
  horaInicioTarde DateTime?
  horaFimTarde    DateTime?

  horarios  horario[]        // Relacionamentos com horários
  disciplinas disciplina[]   // Relacionamento com disciplinas
  professores professor[]
  intervalos intervalo[]
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model intervalo {
  id         String   @id @default(uuid())
  diaSemana  DiaSemana
  horaInicio DateTime   
  horaFim    DateTime
  projetoId  Int
  projeto    Projeto  @relation(fields: [projetoId], references: [id], onDelete: Restrict)

  @@unique([diaSemana, projetoId], map: "unique_intervalo") // Evita intervalos duplicados
}


enum DiaSemana {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}

