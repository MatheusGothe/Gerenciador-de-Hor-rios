generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator erd {
  provider = "prisma-erd-generator"
}
model Professor {
  id              String                     @id @default(uuid())
  nome            String
  email           String                     @unique
  telefone        String?
  projetoId       Int    // Chave estrangeira para associar ao Projeto
  projeto         Projeto   @relation(fields: [projetoId], references: [id], onDelete: Restrict)

  disciplinas     ProfessorOnDisciplina[]
  disponibilidade DisponibilidadeProfessor[]
  horarios        Horario[]
}

model Disciplina {
  id          String    @id @default(uuid())
  nome        String
  duracao     Int       // minutos
  projetoId   Int       // Chave estrangeira para associar ao Projeto

  projeto     Projeto   @relation(fields: [projetoId], references: [id], onDelete: Cascade)
  horarios    Horario[]
  professores ProfessorOnDisciplina[]

  @@unique([nome, projetoId]) // Garante que o nome seja único dentro do mesmo projeto
}

model ProfessorOnDisciplina {
  professorId  String
  disciplinaId String
  projetoId    Int

  professor    Professor   @relation(fields: [professorId], references: [id])
  disciplina   Disciplina  @relation(fields: [disciplinaId], references: [id])

  @@id([professorId, disciplinaId]) // Chave composta
}

model DisponibilidadeProfessor {
  id          String    @id @default(uuid())
  professorId String
  diaSemana   DiaSemana
  horaInicio  DateTime @db.Time()
  horaFim     DateTime @db.Time()
  disponivel  Boolean   @default(true) // Indica se o professor está disponível naquele dia

  professor   Professor @relation(fields: [professorId], references: [id], onDelete: Restrict)
}

model Sala {
  id         String    @id @default(uuid())
  nome       String    @unique
  capacidade Int
  horarios   Horario[]
}

model Turma {
  id       String    @id @default(uuid())
  nome     String    @unique
  horarios Horario[]
}

model Horario {
  id         String      @id @default(uuid())
  diaSemana  DiaSemana
  horaInicio DateTime @db.Time()
  horaFim    DateTime @db.Time()
  projetoId  Int // Chave estrangeira para associar ao Projeto
  projeto    Projeto     @relation(fields: [projetoId], references: [id], onDelete: Restrict)

  turmaId      String
  disciplinaId String
  salaId       String
  professorId  String

  turma      Turma      @relation(fields: [turmaId], references: [id], onDelete: Restrict)
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id], onDelete: Restrict)
  sala       Sala       @relation(fields: [salaId], references: [id], onDelete: Restrict)
  professor  Professor  @relation(fields: [professorId], references: [id], onDelete: Restrict)

  @@unique([diaSemana, horaInicio, professorId]) // Evita conflito de professores
  @@unique([diaSemana, horaInicio, turmaId]) // Evita conflito de turma
  @@unique([diaSemana, horaInicio, salaId]) // Evita conflito de sala
}

model Usuario {
  id       String    @id @default(uuid())
  nome     String
  email    String    @unique
  password String
  projetos Projeto[] // Um usuário pode estar em vários projetos
}

model Projeto {
  id        Int         @id @default(autoincrement()) 
  nome      String
  descricao String?
  usuarioId String
  horaInicioManha DateTime? @db.Time()
  horaFimManha    DateTime? @db.Time()
  horaInicioTarde DateTime? @db.Time()
  horaFimTarde    DateTime? @db.Time()

  horarios     Horario[]     
  disciplinas  Disciplina[]  
  professores  Professor[] // Mantém relação, mas agora impedindo deleção de projeto se houver professores
  intervalos   Intervalo[]
  usuario      Usuario @relation(fields: [usuarioId], references: [id])
}

model Intervalo {
  id         String   @id @default(uuid())
  diaSemana  DiaSemana
  horaInicio DateTime  @db.Time()
  horaFim    DateTime  @db.Time()
  projetoId  Int
  projeto    Projeto  @relation(fields: [projetoId], references: [id], onDelete: Restrict)

  @@unique([diaSemana, projetoId, horaInicio, horaFim], map: "unique_intervalo") // Evita intervalos duplicados
}

enum DiaSemana {
  DOMINGO
  SEGUNDA
  TERCA
  QUARTA
  QUINTA
  SEXTA
  SABADO
}
